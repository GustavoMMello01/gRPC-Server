# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import TaskTracker_pb2 as TaskTracker__pb2


class TaskTrackerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateTask = channel.unary_unary(
                '/tasktracker.TaskTracker/CreateTask',
                request_serializer=TaskTracker__pb2.CreateTaskRequest.SerializeToString,
                response_deserializer=TaskTracker__pb2.CreateTaskResponse.FromString,
                )
        self.ListTask = channel.unary_unary(
                '/tasktracker.TaskTracker/ListTask',
                request_serializer=TaskTracker__pb2.ListTaskRequest.SerializeToString,
                response_deserializer=TaskTracker__pb2.ListTaskResponse.FromString,
                )
        self.ExecuteTask = channel.unary_unary(
                '/tasktracker.TaskTracker/ExecuteTask',
                request_serializer=TaskTracker__pb2.ExecuteTaskRequest.SerializeToString,
                response_deserializer=TaskTracker__pb2.ExecuteTaskResponse.FromString,
                )
        self.FinalizeTask = channel.unary_unary(
                '/tasktracker.TaskTracker/FinalizeTask',
                request_serializer=TaskTracker__pb2.FinalizeTaskRequest.SerializeToString,
                response_deserializer=TaskTracker__pb2.FinalizeTaskResponse.FromString,
                )
        self.RemoveTask = channel.unary_unary(
                '/tasktracker.TaskTracker/RemoveTask',
                request_serializer=TaskTracker__pb2.RemoveTaskRequest.SerializeToString,
                response_deserializer=TaskTracker__pb2.RemoveTaskResponse.FromString,
                )


class TaskTrackerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreateTask(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListTask(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExecuteTask(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FinalizeTask(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveTask(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TaskTrackerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateTask': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateTask,
                    request_deserializer=TaskTracker__pb2.CreateTaskRequest.FromString,
                    response_serializer=TaskTracker__pb2.CreateTaskResponse.SerializeToString,
            ),
            'ListTask': grpc.unary_unary_rpc_method_handler(
                    servicer.ListTask,
                    request_deserializer=TaskTracker__pb2.ListTaskRequest.FromString,
                    response_serializer=TaskTracker__pb2.ListTaskResponse.SerializeToString,
            ),
            'ExecuteTask': grpc.unary_unary_rpc_method_handler(
                    servicer.ExecuteTask,
                    request_deserializer=TaskTracker__pb2.ExecuteTaskRequest.FromString,
                    response_serializer=TaskTracker__pb2.ExecuteTaskResponse.SerializeToString,
            ),
            'FinalizeTask': grpc.unary_unary_rpc_method_handler(
                    servicer.FinalizeTask,
                    request_deserializer=TaskTracker__pb2.FinalizeTaskRequest.FromString,
                    response_serializer=TaskTracker__pb2.FinalizeTaskResponse.SerializeToString,
            ),
            'RemoveTask': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveTask,
                    request_deserializer=TaskTracker__pb2.RemoveTaskRequest.FromString,
                    response_serializer=TaskTracker__pb2.RemoveTaskResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'tasktracker.TaskTracker', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TaskTracker(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreateTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tasktracker.TaskTracker/CreateTask',
            TaskTracker__pb2.CreateTaskRequest.SerializeToString,
            TaskTracker__pb2.CreateTaskResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tasktracker.TaskTracker/ListTask',
            TaskTracker__pb2.ListTaskRequest.SerializeToString,
            TaskTracker__pb2.ListTaskResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ExecuteTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tasktracker.TaskTracker/ExecuteTask',
            TaskTracker__pb2.ExecuteTaskRequest.SerializeToString,
            TaskTracker__pb2.ExecuteTaskResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FinalizeTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tasktracker.TaskTracker/FinalizeTask',
            TaskTracker__pb2.FinalizeTaskRequest.SerializeToString,
            TaskTracker__pb2.FinalizeTaskResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RemoveTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tasktracker.TaskTracker/RemoveTask',
            TaskTracker__pb2.RemoveTaskRequest.SerializeToString,
            TaskTracker__pb2.RemoveTaskResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
